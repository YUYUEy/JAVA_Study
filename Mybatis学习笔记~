==>>	Mybatis介绍
MyBatis 本是apache的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。
2013年11月迁移到Github。
 	MyBatis是一个优秀的持久层框架，它对jdbc的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身，而不需要花费精力去处理例如注册驱动、
    创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码。
Mybatis通过xml或注解的方式将要执行的各种statement（statement、preparedStatemnt、CallableStatement）配置起来，并通过java对象和statement中的sql
进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射成java对象并返回。
********************************************************************************************

1=> Mybatis的输入参数简单类型string integer pojo自定义的对象
    包装类QueryVo, xml...
2=> 输出参数；简单类型ResultMap integer POJO user的类路径
    《POJO》、ResultMap、手动映射、数据表字段与POJO属性名不一致
3=> 动态sql：
    if: 
        判断是否有此条件  <if test="username !=null && username !=''"></if>
    where:  
        当多个条件时，可有可无 where and 条件  where去掉第一个  前and
    sql片段:
        <sql id='name1'>select... </sql>
        <include>
    foreach:
         QueryVo(list ids integer[])
         <foreach collection="ids">
         
 ********************************************************************************************
==>>    使用 MyBatis 的主要 Java 接口就是 SqlSession。 
==>>    现在你有一个 SqlSessionFactory,可以用来创建 SqlSession 实例。
==>>    Mapper XML 文件-->>
        SQL 映射文件有很少的几个顶级元素（按照它们应该被定义的顺序）：

                cache – 给定命名空间的缓存配置。
                cache-ref – 其他命名空间缓存配置的引用。
                resultMap – 是最复杂也是最强大的元素，用来描述如何从数据库结果集中来加载对象。
                sql – 可被其他语句引用的可重用语句块。
                insert – 映射插入语句
                update – 映射更新语句
                delete – 映射删除语句
                select – 映射查询语句
  --> resultMap 元素是 MyBatis 中最重要最强大的元素。
  --> 动态 SQL
             -->if
             -->choose (when, otherwise)
             -->trim (where, set)
             -->foreach
  ********************************************************************************************
  ## jdbc编程步骤

         1. 加载数据库驱动
         2. 创建并获取数据库链接
         3. 创建jdbc statement对象
         4. 设置sql语句
         5. 设置sql语句中的参数(使用preparedStatement)
         6. 通过statement执行sql并获取结果
         7. 对sql执行结果进行解析处理
         8. 释放资源(resultSet、preparedstatement、connection)    
  ********************************************************************************************     
    ## mybatis框架执行过程

        1、配置mybatis的配置文件，SqlMapConfig.xml（名称不固定）
        2、通过配置文件，加载mybatis运行环境，创建SqlSessionFactory会话工厂(SqlSessionFactory在实际使用时按单例方式)
        3、通过SqlSessionFactory创建SqlSession。SqlSession是一个面向用户接口（提供操作数据库方法），
        实现对象是线程不安全的，建议sqlSession应用场合在方法体内。
        4、调用sqlSession的方法去操作数据。如果需要提交事务，需要执行SqlSession的commit()方法。
        5、释放资源，关闭SqlSession 
   ## mybatis开发dao的方法

       1.原始dao 的方法

       - 需要程序员编写dao接口和实现类
       - 需要在dao实现类中注入一个SqlSessionFactory工厂

       2.mapper代理开发方法（建议使用）

       只需要程序员编写mapper接口（就是dao接口）。
       程序员在编写mapper.xml(映射文件)和mapper.java需要遵循一个开发规范：

       - mapper.xml中namespace就是mapper.java的类全路径。
       - mapper.xml中statement的id和mapper.java中方法名一致。
       - mapper.xml中statement的parameterType指定输入参数的类型和mapper.java的方法输入参数类型一致
       - mapper.xml中statement的resultType指定输出结果的类型和mapper.java的方法返回值类型一致。


       SqlMapConfig.xml配置文件：可以配置properties属性、别名、mapper加载。


  ## 输入映射和输出映射

       - 输入映射：
         - parameterType：指定输入参数类型可以简单类型、pojo、hashmap。
         - 对于综合查询，建议parameterType使用包装的pojo，有利于系统扩展。

       - 输出映射：
        - resultType：查询到的列名和resultType指定的pojo的属性名一致，才能映射成功。
        - reusltMap：可以通过resultMap 完成一些高级映射。如果查询到的列名和映射的pojo的属性名不一致时，
        通过resultMap设置列名和属性名之间的对应关系（映射关系）。可以完成映射。
         - 高级映射：
          将关联查询的列映射到一个pojo属性中。（一对一）
          将关联查询的列映射到一个List<pojo>中。（一对多）


 ## 动态sql

       - 动态sql：（重点）
          - if判断（掌握）
          - where
          - foreach
          - sql片段（掌握）
********************************************************************************************
    ## SqlSession使用范围

        - SqlSessionFactoryBuilder

        通过`SqlSessionFactoryBuilder`创建会话工厂`SqlSessionFactory`将`SqlSessionFactoryBuilder`当成一个工具类
        使用即可，不需要使用单例管理`SqlSessionFactoryBuilder`。在需要创建`SqlSessionFactory`时候，
        只需要new一次`SqlSessionFactoryBuilder`即可。

        - `SqlSessionFactory`

            通过`SqlSessionFactory`创建`SqlSession`，使用单例模式管理`sqlSessionFactory`（工厂一旦创建，使用一个实例）。
            将来mybatis和spring整合后，使用单例模式管理`sqlSessionFactory`。
            - `SqlSession`
            `SqlSession`是一个面向用户（程序员）的接口。SqlSession中提供了很多操作数据库的方法：如：`selectOne`
            (返回单个对象)、`selectList`（返回单个或多个对象）。
            `SqlSession`是线程不安全的，在`SqlSesion`实现类中除了有接口中的方法（操作数据库的方法）还有数据域属性。
            `SqlSession`最佳应用场合在方法体内，定义成局部变量使用。

********************************************************************************************
         SqlMapConfig.xml中配置的内容和顺序如下

         - properties（属性）
         - settings（全局配置参数）
         - **typeAliases（类型别名）**
         - typeHandlers（类型处理器）
         - *objectFactory（对象工厂）*
         - *plugins（插件）*
         - environments（环境集合属性对象）
           - environment（环境子属性对象）
              - transactionManager（事务管理）
              - dataSource（数据源）
         - **mappers（映射器）**
********************************************************************************************
        本文主要讲解mybatis的输入映射。


        通过parameterType指定输入参数的类型，类型可以是

        - 简单类型
        - hashmap
        - pojo的包装类型
********************************************************************************************
         本文主要讲解mybatis的输出映射。


         输出映射有两种方式

         - `resultType`
         - `resultMap
             ## resultType

                  - 使用`resultType`进行输出映射，只有查询出来的列名和pojo中的属性名一致，该列才可以映射成功。
                  - 如果查询出来的列名和pojo中的属性名全部不一致，没有创建pojo对象。
                  - 只要查询出来的列名和pojo中的属性有一个一致，就会创建pojo对象。
            使用resultType进行输出映射，只有查询出来的列名和pojo中的属性名一致，该列才可以映射成功。
            如果查询出来的列名和pojo的属性名不一致，通过定义一个resultMap对列名和pojo属性名之间作一个映射关系。
            ---mybatis中使用resultMap完成高级输出结果映射。(一对多，多对多)
********************************************************************************************

********************************************************************************************

********************************************************************************************
